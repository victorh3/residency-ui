{"version":3,"sources":["contexts/auth0-context.js","components/Tooltip.js","components/CardBodyDetails.js","components/CardFooterComments.js","utils/common.js","components/Card.js","contexts/programs-context.js","components/Header.js","components/states.js","components/Sidebar.js","components/Loader.js","views/Main.js","views/Marketplace.js","views/Map.js","components/formSelect.js","views/AddProgram.js","views/EditProgram.js","views/AddProgramDetail.js","views/EditProgramDetail.js","components/PrivateRoute.js","views/ExternalApi.js","App.js","serviceWorker.js","index.js"],"names":["Auth0Context","createContext","useAuth0","useContext","Auth0Provider","state","auth0Client","isLoading","isAuthenticated","user","config","domain","process","client_id","redirect_uri","initializeAuth0","a","createAuth0Client","setState","window","location","search","includes","handleRedirectCallback","getUser","history","replaceState","document","title","this","children","props","configObject","loginWithRedirect","getTokenSilently","getIdTokenClaims","logout","Provider","value","Component","Key","role","aria-label","Address","address","addressLineOne","addressLineTwo","city","zipCode","contact","Contact","firstName","lastName","position","email","phone","href","MyTooltip","useState","show","setShow","tooltipRef","useRef","letter","data","emoji","Button","ref","variant","className","onClick","Overlay","target","current","placement","Tooltip","renderTooltipContent","CardBodyDetails","programDetail","programDetailKeys","Object","keys","filter","i","toLowerCase","renderData","key","Date","toDateString","map","detail","_","startCase","CardFooterComments","toTitleCase","str","replace","txt","charAt","toUpperCase","substr","CardDeck","CustomCard","showModal","setShowModal","program","marketplace","Card","Header","Container","fluid","Row","Col","xs","Title","programName","erasApplicationDate","contacts","url","length","rel","Body","Footer","InputGroup","size","to","programId","programDetailId","Modal","onHide","aria-labelledby","centered","closeButton","id","ProgramsContext","usePrograms","ProgramsProvider","programs","setPrograms","states","type","year","filters","setFilters","categories","setCategories","setIsLoading","callToAPI","query","setFunction","axios","method","baseURL","then","response","catch","error","console","log","useEffect","filterKeys","queryBuilder","values","push","join","Navbar","bg","fixed","Brand","Nav","Item","Link","as","NavDropdown","Divider","returnTo","origin","name","abbreviation","Sidebar","lastFilters","setLastFilters","handleOnChange","e","checkedStates","Set","checked","add","delete","Form","Group","controlId","Label","Control","onChange","category","categoryId","categoryName","toString","Check","label","statesList","indexOf","Loader","Spinner","animation","Main","Marketplace","index","MapView","React","selectedProgram","setSelectedProgram","bounds","setBounds","latLngs","L","latLng","latitude","longitude","bnds","latLngBounds","Map","TileLayer","attribution","Marker","Popup","onClose","style","margin","formSelect","AddProgram","detailsFieldName","indexes","setIndexes","counter","setCounter","useForm","register","handleSubmit","watch","useHistory","letterOfRec","complexLevelOneAccepted","complexLevelTwoAccepted","usmleLevelOneAccepted","usmleLevelTwoAccepted","uuidv4","addressId","addContact","prevIndexes","prevCounter","removeContact","item","endpoint","setData","useResidencyApiGet","onSubmit","scope","audience","token","JSON","stringify","post","headers","Authorization","crossDomain","withCredentials","readOnly","placeholder","toLocaleString","fieldName","defaultValue","selectOption","disabled","rows","md","EditProgram","match","params","reset","put","AddProgramDetail","EditProgramDetail","PrivateRoute","component","path","rest","render","ExternalApi","showResult","setShowResult","apiMessage","setApiMessage","callApi","fetch","responseData","statusText","App","exact","Boolean","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4c3633e4.chunk.js","sourcesContent":["import React, { Component, createContext, useContext } from 'react';\nimport createAuth0Client from '@auth0/auth0-spa-js';\n\n// create the context\nexport const Auth0Context = createContext();\n\n// export the context as useAuth0\nexport const useAuth0 = () => useContext(Auth0Context);\n\n// create a provider\nexport class Auth0Provider extends Component {\n  state = {\n    auth0Client: null,\n    isLoading: true,\n    isAuthenticated: false,\n    user: null,\n  };\n\n  config = {\n    domain: process.env.REACT_APP_AUTH0_DOMAIN,\n    client_id: process.env.REACT_APP_AUTH0_CLIENT_ID,\n    redirect_uri: process.env.REACT_APP_REDIRECT_URL,\n  };\n\n  componentDidMount() {\n    this.initializeAuth0();\n  }\n\n  initializeAuth0 = async () => {\n    const auth0Client = await createAuth0Client(this.config);\n    this.setState({ auth0Client });\n\n    // check to see if they have been redirected after login\n    if (window.location.search.includes('code=')) {\n      return this.handleRedirectCallback();\n    }\n\n    const isAuthenticated = await auth0Client.isAuthenticated();\n    const user = isAuthenticated ? await auth0Client.getUser() : null;\n    this.setState({ isLoading: false, isAuthenticated, user });\n  };\n\n  handleRedirectCallback = async () => {\n    this.setState({ isLoading: true });\n\n    await this.state.auth0Client.handleRedirectCallback();\n    const user = await this.state.auth0Client.getUser();\n\n    this.setState({ user, isAuthenticated: true, isLoading: false });\n    // window.history.replaceState({}, document.title, window.location.pathname);\n    window.history.replaceState({}, document.title, process.env.PUBLIC_URL);\n  };\n\n  render() {\n    const { auth0Client, isLoading, isAuthenticated, user } = this.state;\n    const { children } = this.props;\n\n    const configObject = {\n      isLoading,\n      isAuthenticated,\n      user,\n      loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n      getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n      getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n      logout: (...p) => auth0Client.logout(...p),\n    };\n\n    return (\n      <Auth0Context.Provider value={configObject}>\n        {children}\n      </Auth0Context.Provider>\n    );\n  }\n}\n","import React, { useState, useRef } from 'react';\nimport Overlay from 'react-bootstrap/Overlay';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport Button from 'react-bootstrap/Button';\n\nconst Key = () => {\n  return (\n    <div>\n      <div>\n        <span role=\"img\" aria-label=\"checkmark emoji\">\n          ✔️{' '}\n        </span>\n        Yes\n      </div>\n      <div>\n        <span role=\"img\" aria-label=\"x emoji\">\n          ❌{' '}\n        </span>\n        No\n      </div>\n      <div>\n        <span>N/Av</span> Not Available\n      </div>\n      <div>\n        <span>N/Ap</span> Not Applicable\n      </div>\n    </div>\n  );\n};\n\nconst Address = (props) => {\n  const {\n    addressLineOne,\n    addressLineTwo,\n    city,\n    state,\n    zipCode,\n  } = props.address;\n  return (\n    <div>\n      <div contact>{addressLineOne}</div>\n      <div contact>{addressLineTwo}</div>\n      <div contact>{`${city}, ${state} ${zipCode}`}</div>\n    </div>\n  );\n};\n\nconst Contact = (props) => {\n  const { firstName, lastName, position, email, phone } = props.contact[0];\n  return (\n    <div>\n      {firstName} {lastName}\n      <br />\n      {position}\n      <br />\n      <a href={`mailto:${email}`}>{email}</a>\n      <br />\n      <a href={`tel:${phone}`}>{phone}</a>\n    </div>\n  );\n};\n\nconst renderTooltipContent = (letter, data = null) => {\n  switch (letter) {\n    case 'a':\n      return <Address address={data} />;\n    case 'c':\n      return <Contact contact={data} />;\n    case 'k':\n    default:\n      return <Key />;\n  }\n};\n\nconst MyTooltip = (props) => {\n  const [show, setShow] = useState(false);\n  const tooltipRef = useRef(null);\n  const placement = 'left';\n  const { letter, data, emoji } = props;\n  return (\n    <>\n      <Button\n        ref={tooltipRef}\n        variant=\"outline-dark\"\n        className=\"Tooltip--button\"\n        onClick={() => setShow(!show)}\n      >\n        {emoji}\n      </Button>\n      <Overlay target={tooltipRef.current} show={show} placement={placement}>\n        {(props) => (\n          <Tooltip {...props}>\n            {renderTooltipContent(letter, data, emoji)}\n          </Tooltip>\n        )}\n      </Overlay>\n    </>\n  );\n};\n\nexport default MyTooltip;\n","import React from 'react';\nimport _ from 'lodash';\n\nconst CardBodyDetails = (props) => {\n  const { programDetail } = props;\n  let programDetailKeys = Object.keys(programDetail);\n\n  programDetailKeys = programDetailKeys.filter((i) => {\n    if (i.toLowerCase().includes('othercomments')) return false;\n    if (i.toLowerCase().includes('programdetailid')) return false;\n    if (i.toLowerCase().includes('programid')) return false;\n    if (i.toLowerCase().includes('url')) return false;\n    if (i.toLowerCase().includes('lastupdatedby')) return false;\n    if (i.toLowerCase().includes('lastupdateddt')) return false;\n    if (i.toLowerCase().includes('erasapplicationdate')) return false;\n    return programDetail[i];\n  });\n\n  const renderData = (key, data) => {\n    if (data === 'Yes')\n      return (\n        <span role=\"img\" aria-label=\"checkmark emoji\">\n          ✔️\n        </span>\n      );\n    if (data === 'No')\n      return (\n        <span role=\"img\" aria-label=\"x emoji\">\n          ❌{' '}\n        </span>\n      );\n    if (data === 'Not Available') return 'N/Av';\n    if (data === 'Not Applicable') return 'N/Ap';\n    if (\n      key.toLowerCase().includes('date') &&\n      !key.toLowerCase().includes('lastupdatedby')\n    )\n      return new Date(data).toDateString();\n\n    return data;\n  };\n\n  return (\n    <div className=\"Card__Body\">\n      {programDetailKeys.map((detail) =>\n        detail.toLowerCase().includes('comments') ||\n        detail.toLowerCase().includes('details') ||\n        detail.toLowerCase().includes('score') ? (\n          <div className=\"Card__BodyDetail\">\n            <div className=\"Break\">\n              <div className=\"Card--bold\">{_.startCase(detail)}</div>\n              <div>{renderData(detail, programDetail[detail])}</div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"Card__BodyDetail\">\n            <span className=\"Card--bold\">{_.startCase(detail)}</span>\n            <span>{renderData(detail, programDetail[detail])}</span>\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default CardBodyDetails;\n","import React from 'react';\nimport _ from 'lodash';\n\nconst CardFooterComments = (props) => {\n  const { programDetail } = props;\n  let programDetailKeys = Object.keys(programDetail);\n\n  programDetailKeys = programDetailKeys.filter((i) => {\n    return i.toLowerCase().includes('othercomments') && programDetail[i];\n  });\n\n  return (\n    <div className=\"Card__Footer\">\n      {programDetailKeys.map((detail) => (\n        <div>\n          <span className=\"Card--bold CardFooter__comments\">\n            {_.startCase(detail)}\n          </span>\n          <span>{programDetail[detail]}</span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CardFooterComments;\n","export const toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\nexport const urlFormatter = (str) => {\n  let prefix = 'https://';\n  if (str.substr(0, prefix.length) !== prefix) {\n    str = prefix + str;\n  }\n  return str;\n};\n","import React, { Fragment, useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { useAuth0 } from '../contexts/auth0-context';\nimport { Link } from 'react-router-dom';\nimport Tooltip from './Tooltip';\nimport CardBodyDetails from './CardBodyDetails';\nimport CardFooterComments from './CardFooterComments';\nimport { urlFormatter } from '../utils/common';\n\nexport const CardDeck = (props) => <div {...props} className=\"CardDeck\" />;\n\nexport const CustomCard = (props) => {\n  const { user } = useAuth0();\n  const [showModal, setShowModal] = useState(false);\n  const { program, marketplace } = props;\n  const handleClose = () => setShowModal(false);\n\n  return (\n    <Fragment>\n      <Card className={marketplace ? 'Card Marketplace-card' : 'Card'}>\n        <Card.Header>\n          <Container fluid>\n            <Row className=\"CardHeader__title\">\n              <Col xs={10}>\n                <Card.Title className=\"CardHeader__titleText\">\n                  {program.programName}\n                </Card.Title>\n              </Col>\n              <Col xs={2} className=\"Card--alignRight\">\n                <Tooltip letter=\"k\" emoji=\"🔑\" />\n              </Col>\n            </Row>\n            <Row className=\"CardHeader__date\">\n              <Col xs={10}>\n                {new Date(program.programDetail.erasApplicationDate) <\n                new Date('2000', '01', '01')\n                  ? 'Application deadline unavailable'\n                  : `Appy by: ${new Date(\n                      program.programDetail.erasApplicationDate\n                    ).toDateString()}`}\n              </Col>\n              <Col xs={2} className=\"Card--alignRight\">\n                <Tooltip letter=\"c\" emoji=\"📞\" data={program.contacts} />\n              </Col>\n            </Row>\n            <Row className=\"CardHeader__url\">\n              <Col xs={10} className=\"Card--alignLeft\">\n                <a\n                  href={urlFormatter(program.programDetail.url)}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {' '}\n                  Website\n                </a>\n              </Col>\n              <Col xs={2} className=\"Card--alignRight\">\n                <Tooltip letter=\"a\" emoji=\"🏥\" data={program.address} />\n              </Col>\n            </Row>\n          </Container>\n        </Card.Header>\n        <Card.Body>\n          <Container fluid>\n            <Row>\n              <Col>\n                <CardBodyDetails programDetail={program.programDetail} />\n              </Col>\n            </Row>\n          </Container>\n        </Card.Body>\n        <Card.Footer>\n          <Container fluid>\n            <Row>\n              <Col>\n                <CardFooterComments programDetail={program.programDetail} />\n              </Col>\n            </Row>\n          </Container>\n          {user && (\n            <InputGroup size=\"sm\" className=\"mb-3\">\n              <Link to={`/editProgram/${program.programId}`}>\n                <Button>Edit Program </Button>\n              </Link>\n              <Link\n                to={`/editProgramDetail/${program.programDetail.programDetailId}`}\n              >\n                <Button variant=\"secondary\">Edit Program Detail</Button>\n              </Link>\n            </InputGroup>\n          )}\n        </Card.Footer>\n      </Card>\n      <Modal\n        show={showModal}\n        onHide={handleClose}\n        size=\"lg\"\n        aria-labelledby=\"modal-residency-map-location\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"modal-residency-map-location\">\n            Modal heading\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Map</h4>\n          <p>A cute little map goes here.</p>\n        </Modal.Body>\n      </Modal>\n    </Fragment>\n  );\n};\n","import React, { useState, useEffect, createContext, useContext } from 'react';\nimport axios from 'axios';\n\nconst API_ENDPOINT_URL = 'https://residency.azurewebsites.net';\n\nexport const ProgramsContext = createContext();\n\nexport const usePrograms = () => useContext(ProgramsContext);\n\nexport const ProgramsProvider = (props) => {\n  const { children } = props;\n  const [programs, setPrograms] = useState([]);\n  const [filters, setFilters] = useState({\n    states: [],\n    type: ['14'],\n    year: [2021],\n  });\n  const [categories, setCategories] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const callToAPI = (query, setFunction) => {\n    let current = true;\n    if (current) {\n      axios({\n        method: 'get',\n        baseURL: API_ENDPOINT_URL,\n        url: query,\n      })\n        .then((response) => {\n          setFunction([...response.data]);\n          setIsLoading(false);\n        })\n        .catch((error) => {\n          console.log(error);\n          setIsLoading(false);\n        });\n      return () => (current = false);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    let query = '/categories';\n    callToAPI(query, setCategories);\n  }, []);\n\n  useEffect(() => {\n    setIsLoading(true);\n    let query = '/programs?';\n    const filterKeys = Object.keys(filters);\n    const queryBuilder = [];\n\n    for (const key of filterKeys) {\n      const values = filters[key].map((i) => `${key}=${i}`);\n      queryBuilder.push(values.join('&'));\n    }\n\n    query += queryBuilder.join('&');\n    callToAPI(query, setPrograms);\n  }, [filters]);\n\n  return (\n    <ProgramsContext.Provider\n      value={{\n        programs,\n        setPrograms,\n        filters,\n        setFilters,\n        categories,\n        setCategories,\n        isLoading,\n        setIsLoading,\n      }}\n    >\n      {children}\n    </ProgramsContext.Provider>\n  );\n};\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport { Link } from 'react-router-dom';\nimport { useAuth0 } from '../contexts';\n\nconst Header = () => {\n  const { isLoading, user, loginWithRedirect, logout } = useAuth0();\n\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\">\n      <Navbar.Brand>Residency UI</Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Nav.Item>\n          <Nav.Link as={Link} to=\"/\">\n            Cards\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link as={Link} to=\"/map\">\n            Map\n          </Nav.Link>\n        </Nav.Item>\n        {user && (\n          <NavDropdown title=\"Actions\" id=\"basic-nav-dropdown\">\n            <NavDropdown.Item as={Link} to=\"/addProgram\">\n              Add Program\n            </NavDropdown.Item>\n            <NavDropdown.Item as={Link} to=\"/editProgram\">\n              Edit Program\n            </NavDropdown.Item>\n            <NavDropdown.Divider />\n            <NavDropdown.Item as={Link} to=\"/addProgramDetail\">\n              Add Program Detail\n            </NavDropdown.Item>\n            <NavDropdown.Item as={Link} to=\"/editProgramDetail\">\n              Edit Program Detail\n            </NavDropdown.Item>\n            <NavDropdown.Divider />\n            <NavDropdown.Item as={Link} to=\"/external-api\">\n              API status\n            </NavDropdown.Item>\n          </NavDropdown>\n        )}\n      </Nav>\n      <Nav className=\"mr-sm-2\">\n        <Nav.Item className=\"justify-content-end\">\n          {!isLoading && !user && (\n            <Nav.Link onClick={loginWithRedirect}>Sign in</Nav.Link>\n          )}\n          {!isLoading && user && (\n            <Nav.Link\n              className=\"justify-content-end\"\n              onClick={() =>\n                logout({ returnTo: `${window.location.origin}/residency-ui` })\n              }\n            >\n              Sign Out\n            </Nav.Link>\n          )}\n        </Nav.Item>\n      </Nav>\n    </Navbar>\n  );\n};\n\nexport default Header;\n","export const states = [\n  {\n    name: 'Alabama',\n    abbreviation: 'AL',\n  },\n  {\n    name: 'Alaska',\n    abbreviation: 'AK',\n  },\n  {\n    name: 'Arizona ',\n    abbreviation: 'AZ',\n  },\n  {\n    name: 'Arkansas',\n    abbreviation: 'AR',\n  },\n  {\n    name: 'California ',\n    abbreviation: 'CA',\n  },\n  {\n    name: 'Colorado ',\n    abbreviation: 'CO',\n  },\n  {\n    name: 'Connecticut',\n    abbreviation: 'CT',\n  },\n  {\n    name: 'Delaware',\n    abbreviation: 'DE',\n  },\n  {\n    name: 'Florida',\n    abbreviation: 'FL',\n  },\n  {\n    name: 'Georgia',\n    abbreviation: 'GA',\n  },\n  {\n    name: 'Hawaii',\n    abbreviation: 'HI',\n  },\n  {\n    name: 'Idaho',\n    abbreviation: 'ID',\n  },\n  {\n    name: 'Illinois',\n    abbreviation: 'IL',\n  },\n  {\n    name: 'Indiana',\n    abbreviation: 'IN',\n  },\n  {\n    name: 'Iowa',\n    abbreviation: 'IA',\n  },\n  {\n    name: 'Kansas',\n    abbreviation: 'KS',\n  },\n  {\n    name: 'Kentucky',\n    abbreviation: 'KY',\n  },\n  {\n    name: 'Louisiana',\n    abbreviation: 'LA',\n  },\n  {\n    name: 'Maine',\n    abbreviation: 'ME',\n  },\n  {\n    name: 'Maryland',\n    abbreviation: 'MD',\n  },\n  {\n    name: 'Massachusetts',\n    abbreviation: 'MA',\n  },\n  {\n    name: 'Michigan',\n    abbreviation: 'MI',\n  },\n  {\n    name: 'Minnesota',\n    abbreviation: 'MN',\n  },\n  {\n    name: 'Mississippi',\n    abbreviation: 'MS',\n  },\n  {\n    name: 'Missouri',\n    abbreviation: 'MO',\n  },\n  {\n    name: 'Montana',\n    abbreviation: 'MT',\n  },\n  {\n    name: 'Nebraska',\n    abbreviation: 'NE',\n  },\n  {\n    name: 'Nevada',\n    abbreviation: 'NV',\n  },\n  {\n    name: 'New Hampshire',\n    abbreviation: 'NH',\n  },\n  {\n    name: 'New Jersey',\n    abbreviation: 'NJ',\n  },\n  {\n    name: 'New Mexico',\n    abbreviation: 'NM',\n  },\n  {\n    name: 'New York',\n    abbreviation: 'NY',\n  },\n  {\n    name: 'North Carolina',\n    abbreviation: 'NC',\n  },\n  {\n    name: 'North Dakota',\n    abbreviation: 'ND',\n  },\n  {\n    name: 'Ohio',\n    abbreviation: 'OH',\n  },\n  {\n    name: 'Oklahoma',\n    abbreviation: 'OK',\n  },\n  {\n    name: 'Oregon',\n    abbreviation: 'OR',\n  },\n  {\n    name: 'Pennsylvania',\n    abbreviation: 'PA',\n  },\n  {\n    name: 'Puerto Rico',\n    abbreviation: 'PR',\n  },\n  {\n    name: 'Rhode Island',\n    abbreviation: 'RI',\n  },\n  {\n    name: 'South Carolina',\n    abbreviation: 'SC',\n  },\n  {\n    name: 'South Dakota',\n    abbreviation: 'SD',\n  },\n  {\n    name: 'Tennessee',\n    abbreviation: 'TN',\n  },\n  {\n    name: 'Texas',\n    abbreviation: 'TX',\n  },\n  {\n    name: 'Utah',\n    abbreviation: 'UT',\n  },\n  {\n    name: 'Vermont',\n    abbreviation: 'VT',\n  },\n  {\n    name: 'Virginia ',\n    abbreviation: 'VA',\n  },\n  {\n    name: 'Washington',\n    abbreviation: 'WA',\n  },\n  {\n    name: 'West Virginia',\n    abbreviation: 'WV',\n  },\n  {\n    name: 'Wisconsin',\n    abbreviation: 'WI',\n  },\n  {\n    name: 'Wyoming',\n    abbreviation: 'WY',\n  },\n  {\n    name: 'Washington, D.C.',\n    abbreviation: 'DC',\n  },\n];\n","import React, { useState } from 'react';\nimport { Form } from 'react-bootstrap';\nimport { states as statesList } from './states';\nimport { toTitleCase } from './../utils/common';\nimport { usePrograms } from '../contexts';\n\nconst Sidebar = () => {\n  const { filters, setFilters, categories } = usePrograms();\n  const { type, states } = filters;\n  const [lastFilters, setLastFilters] = useState(['AZ']);\n\n  const handleOnChange = (e) => {\n    const { name, value } = e.target;\n    if (name === 'states') {\n      const checkedStates = new Set([...states]);\n      if (e.target.checked) {\n        checkedStates.add(value);\n      } else {\n        checkedStates.delete(value);\n      }\n      setFilters({ ...filters, [name]: [...checkedStates] });\n    } else {\n      setFilters({ ...filters, [name]: [value] });\n    }\n  };\n\n  const handleSelectAlOnChange = (e) => {\n    const { checked } = e.target;\n    if (checked) {\n      setLastFilters([...states]);\n      setFilters({ ...filters, states: [] });\n    } else {\n      setFilters({ ...filters, states: [...lastFilters] });\n    }\n  };\n\n  return (\n    <div className=\"Sidebar\">\n      <div className=\"Sidebar__Menu\">\n        <Form>\n          <Form.Group\n            controlId=\"program-categories\"\n            className=\"Sidebar__Categories\"\n          >\n            <Form.Label>Program Categories</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name=\"type\"\n              onChange={handleOnChange}\n              value={type[0]}\n            >\n              {categories.map((category) => (\n                <option\n                  name=\"type\"\n                  key={`.${category.categoryId}`}\n                  value={category.categoryId}\n                  id={category.categoryId}\n                >\n                  {toTitleCase(category.categoryName.toString())}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group controlId=\"program-states\">\n            <Form.Label>States</Form.Label>\n            <Form.Check\n              name=\"states\"\n              checked={!states.length}\n              key={`.all`}\n              value=\"all\"\n              type=\"checkbox\"\n              id=\"all\"\n              label=\"All States\"\n              onChange={handleSelectAlOnChange}\n            />\n            {statesList.map((state) => (\n              <Form.Check\n                name=\"states\"\n                checked={states.indexOf(state.abbreviation) > -1}\n                key={`.${state.abbreviation}`}\n                value={state.abbreviation}\n                type=\"checkbox\"\n                id={state.abbreviation}\n                label={state.name}\n                onChange={handleOnChange}\n              />\n            ))}\n          </Form.Group>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\n\nconst Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__Overlay\"></div>\n    <Spinner animation=\"border\" role=\"status\">\n      <span className=\"sr-only Loader__Spinner\">Loading...</span>\n    </Spinner>\n  </div>\n);\n\nexport default Loader;\n","import React from 'react';\nimport { Sidebar, Loader } from '../components';\nimport { usePrograms } from '../contexts';\n\nconst Main = ({ children }) => {\n  const { filters, categories, isLoading } = usePrograms();\n\n  return (\n    <section>\n      <Sidebar categories={categories} filters={filters} />\n      <div className=\"Main\">{children}</div>\n      {isLoading && <Loader />}\n    </section>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport { Card, CardDeck } from '../components';\nimport { usePrograms } from '../contexts';\n\nconst Marketplace = () => {\n  const { programs } = usePrograms();\n\n  return (\n    <CardDeck>\n      {programs.length ? (\n        programs.map((program, index) => (\n          <Card\n            key={`${index}-${program.programId}`}\n            program={program}\n            marketplace={true}\n          />\n        ))\n      ) : (\n        <p>\n          Sorry{' '}\n          <span role=\"img\" aria-label=\"sad face\">\n            😞\n          </span>\n          , no residencies\n          <span role=\"img\" aria-label=\"hospital\">\n            🏥\n          </span>{' '}\n          found matching your search criteria. Try adjusting your filters\n          <span role=\"img\" aria-label=\"stethoscope and lab coat\">\n            🩺🥼\n          </span>\n          .\n        </p>\n      )}\n    </CardDeck>\n  );\n};\n\nexport default Marketplace;\n","import React, { useState, useEffect } from 'react';\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet';\nimport { usePrograms } from '../contexts';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport { Card } from '../components';\nimport L from 'leaflet';\n\nconst MapView = () => {\n  const { programs } = usePrograms();\n  const [selectedProgram, setSelectedProgram] = React.useState(null);\n  const [showModal, setShowModal] = useState(false);\n  const handleClose = () => setShowModal(false);\n  const handleShow = () => setShowModal(true);\n  const [bounds, setBounds] = React.useState([32.25233, -110.87966]);\n  const [isLoading, setIsLoading] = React.useState(true);\n\n  useEffect(() => {\n    if (programs.length) {\n      const latLngs = programs.map((program) => {\n        return L.latLng(program.address.latitude, program.address.longitude);\n      });\n\n      const bnds = L.latLngBounds(latLngs);\n      setBounds(bnds);\n      setIsLoading(false);\n    }\n  }, [programs]);\n\n  return (\n    <div>\n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n        <Map bounds={bounds}>\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          />\n          {programs.map((program) => (\n            <Marker\n              key={program.programId}\n              position={[program.address.latitude, program.address.longitude]}\n              onClick={() => {\n                setSelectedProgram(program);\n              }}\n            />\n          ))}\n          {selectedProgram && (\n            <Popup\n              position={[\n                selectedProgram.address.latitude,\n                selectedProgram.address.longitude,\n              ]}\n              onClose={() => {\n                setSelectedProgram(null);\n              }}\n            >\n              <h6>{selectedProgram.programName}</h6>\n              <div>{selectedProgram.address.addressLineOne}</div>\n              <div>{selectedProgram.address.addressLineTwo}</div>\n              <div>{`${selectedProgram.address.city}, ${selectedProgram.address.state} ${selectedProgram.address.zipCode} `}</div>\n              <Button\n                className=\"Map-ShowModal--button\"\n                variant=\"link\"\n                onClick={handleShow}\n              >\n                Learn more\n              </Button>\n            </Popup>\n          )}\n          <Modal\n            show={showModal}\n            onHide={handleClose}\n            size=\"lg\"\n            aria-labelledby=\"modal-residency-map-location\"\n            centered\n          >\n            <Card\n              program={selectedProgram}\n              style={{ margin: '0' }}\n              className=\"Map-ModalCard\"\n            />\n          </Modal>\n        </Map>\n      )}\n    </div>\n  );\n};\n\nexport default MapView;\n","export const formSelect = [\n  {\n    name: 'Yes',\n    value: 'Yes',\n  },\n  {\n    name: 'No',\n    value: 'No',\n  },\n  {\n    name: 'Not Applicable',\n    value: 'Not Applicable',\n  },\n  {\n    name: 'Not Available',\n    value: 'Not Available',\n  },\n];\n","import React, { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Form, Col, Button } from 'react-bootstrap';\nimport { v4 as uuidv4 } from 'uuid';\nimport { states as statesList } from './../components/states';\nimport axios from 'axios';\nimport { toTitleCase } from './../utils/common';\nimport { formSelect } from './../components/formSelect';\nimport { useAuth0 } from '../contexts/auth0-context';\nimport { useHistory } from 'react-router-dom';\n\nconst useResidencyApiGet = (endpoint, filters = {}) => {\n  const [data, setData] = useState([]);\n\n  let query = `/${endpoint}`;\n  switch (endpoint) {\n    case 'categories':\n    default:\n  }\n\n  // console.log(query);\n\n  useEffect(() => {\n    // https://residency.azurewebsites.net/swagger/index.html\n    let current = true;\n    if (current) {\n      axios({\n        method: 'get',\n        baseURL: 'https://residency.azurewebsites.net',\n        url: query,\n      })\n        .then((response) => {\n          setData([...response.data]);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n      return () => (current = false);\n    }\n  }, [query]);\n\n  return data;\n};\n\nconst AddProgram = () => {\n  const detailsFieldName = `programDetails[0]`;\n  const [indexes, setIndexes] = React.useState([]);\n  const [counter, setCounter] = React.useState(0);\n  const [apiMessage, setApiMessage] = useState('');\n  const { getTokenSilently } = useAuth0();\n  const { register, handleSubmit, watch } = useForm();\n  const history = useHistory();\n  const letterOfRec = watch(`${detailsFieldName}.letterOfRec`);\n  const complexLevelOneAccepted = watch(\n    `${detailsFieldName}.comlexLevelOneAccepted`\n  );\n  const complexLevelTwoAccepted = watch(\n    `${detailsFieldName}.comlexLevelTwoAccepted`\n  );\n  const usmleLevelOneAccepted = watch(\n    `${detailsFieldName}.usmleLevelOneAccepted`\n  );\n  const usmleLevelTwoAccepted = watch(\n    `${detailsFieldName}.usmleLevelTwoAccepted`\n  );\n\n  // const onSubmit = (data) => {\n  //   console.log(JSON.stringify(data));\n  //   alert(JSON.stringify(data));\n  // };\n\n  const programId = uuidv4();\n  const addressId = uuidv4();\n  // const dateTime = new Date().toLocaleString();\n\n  const addContact = () => {\n    setIndexes((prevIndexes) => [...prevIndexes, counter]);\n    setCounter((prevCounter) => prevCounter + 1);\n  };\n\n  const removeContact = (index) => () => {\n    setIndexes((prevIndexes) => [\n      ...prevIndexes.filter((item) => item !== index),\n    ]);\n    setCounter((prevCounter) => prevCounter - 1);\n  };\n\n  if (counter < 1) {\n    addContact();\n  }\n\n  const categories = useResidencyApiGet('categories');\n\n  //const onSubmit = (data) => {\n  // const onSubmit = async (data) => {\n  //   //try {\n  //   const token = await getTokenSilently({\n  //     scope: 'read:status, write:program',\n  //     audience: 'https://github.com/tguar/ResidencyAPI',\n  //   });\n\n  //   console.log(token);\n  //   console.log(JSON.stringify(data));\n  //     const response = axios.post(\n  //       'https://residency.azurewebsites.net/programs/',\n  //       {\n  //         headers: {\n  //           Authorization: `Bearer ${token}`,\n  //         },\n  //         'Content-Type': 'application/json',\n  //         data: data,\n  //       }\n  //     );\n  //     // const responseData = { result: 'womp' };\n  //     const responseData = await response;\n  //     // console.log(responseData.text());\n  //     //setShowResult(true);\n  //     console.log(responseData.statusText);\n  //     //let a = responseData.statusText;\n  //     //setApiMessage(a);\n  //   } catch (error) {\n  //     console.error(error);\n  //   }\n  // };\n  const onSubmit = async (data) => {\n    try {\n      const token = await getTokenSilently({\n        scope: 'read:status, write:program',\n        audience: 'https://github.com/tguar/ResidencyAPI',\n      });\n\n      console.log(token);\n      console.log(JSON.stringify(data));\n\n      axios\n        .post(`https://residency.azurewebsites.net/programs/`, data, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            crossDomain: true,\n            withCredentials: true,\n            'Content-Type': 'application/json',\n          },\n        })\n        .then(history.push('/marketplace'))\n        .catch((e) => console.log(e));\n      // const responseData = { result: 'womp' };\n      // const responseData = await response;\n      // console.log(responseData.text());\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <div className=\"col-md-8 offset-md-2\">\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formProgramId\">\n            <Form.Label>ProgramId</Form.Label>\n            <Form.Control\n              name=\"programId\"\n              type=\"string\"\n              value={programId}\n              ref={register}\n              readOnly\n            />\n          </Form.Group>\n\n          <Form.Group as={Col} controlId=\"formProgramName\">\n            <Form.Label>Program Name</Form.Label>\n            <Form.Control\n              name=\"programName\"\n              type=\"string\"\n              placeholder=\"Program Name\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formProgramIdInAddress\">\n            <Form.Label>ProgramId</Form.Label>\n            <Form.Control\n              name=\"address.programId\"\n              type=\"string\"\n              value={programId}\n              ref={register}\n              readOnly\n            />\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"formAddressId\">\n            <Form.Label>AddressId</Form.Label>\n            <Form.Control\n              name=\"address.addressId\"\n              type=\"string\"\n              value={addressId}\n              ref={register}\n              readOnly\n            />\n          </Form.Group>\n        </Form.Row>\n        <hr></hr>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formAddressLineOne\">\n            <Form.Label>Address Line 1</Form.Label>\n            <Form.Control\n              name=\"address.addressLineOne\"\n              placeholder=\"1234 Main St\"\n              ref={register}\n            />\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"formAddressLineTwo\">\n            <Form.Label>Address Line 2</Form.Label>\n            <Form.Control\n              name=\"address.addressLineTwo\"\n              placeholder=\"Apartment, studio, or floor\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formCity\">\n            <Form.Label>City</Form.Label>\n            <Form.Control name=\"address.city\" ref={register} />\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"formState\">\n            <Form.Label>State</Form.Label>\n            <Form.Control as=\"select\" name=\"address.state\" ref={register}>\n              {statesList.map((state, index) => (\n                <option\n                  name=\"address.state\"\n                  key={`stateAddressDropdownKey.${index}`}\n                  value={state.abbreviation}\n                  id={`stateAddressDropdown.${index}`}\n                >\n                  {state.name}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"formZip\">\n            <Form.Label>Zip</Form.Label>\n            <Form.Control type=\"string\" name=\"address.zipCode\" ref={register} />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formLatitude\">\n            <Form.Label>Latitude</Form.Label>\n            <Form.Control\n              name=\"address.latitude\"\n              placeholder=\"\"\n              ref={register}\n            />\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"formLongitude\">\n            <Form.Label>Longitude</Form.Label>\n            <Form.Control\n              name=\"address.longitude\"\n              placeholder=\"\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formLastUpdatedByAddress\">\n            {/* <Form.Label>Last</Form.Label> */}\n            <Form.Control\n              name=\"address.lastUpdatedBy\"\n              type=\"string\"\n              value=\"Seed\"\n              ref={register}\n              readOnly\n            />\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"formLastUpdatedDate\">\n            {/* <Form.Label>AddressId</Form.Label> */}\n            <Form.Control\n              name=\"address.lastUpdatedDT\"\n              type=\"string\"\n              value={new Date().toLocaleString()}\n              ref={register}\n              readOnly\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <hr></hr>\n        {/* CONTACTS */}\n\n        {indexes.map((index) => {\n          const fieldName = `contacts[${index}]`;\n          return (\n            <div key={`contacts.${index}`}>\n              <Form.Row>\n                {/* <Form.Group\n                  as={Col}\n                  controlId={`formProgramIdcontacts[${index}]`}\n                >\n                  <Form.Label>ProgramId</Form.Label>\n                  <Form.Control\n                    name={`${fieldName}.programId`}\n                    type=\"string\"\n                    value={programId}\n                    ref={register}\n                    readOnly\n                  />\n                </Form.Group> */}\n                <Form.Group as={Col} controlId={`formContacts${`${index}`}Id`}>\n                  <Form.Label>Contact {`${index}`}</Form.Label>\n                  {/* <Form.Control\n                    name={`${fieldName}.Id`}\n                    type=\"string\"\n                    value={`${fieldName}`}\n                    readOnly\n                  /> */}\n                </Form.Group>\n                <Form.Group\n                  as={Col}\n                  controlId={`formContacts${`${index}`}ContactId`}\n                >\n                  <Form.Label>ContactId</Form.Label>\n                  <Form.Control\n                    name={`${fieldName}.contactId`}\n                    type=\"string\"\n                    value={uuidv4()}\n                    ref={register}\n                    readOnly\n                  />\n                </Form.Group>\n              </Form.Row>\n              <Form.Row>\n                <Form.Group\n                  as={Col}\n                  controlId={`formContacts${`${index}`}FirstName`}\n                >\n                  <Form.Label>First Name {`${index}`}</Form.Label>\n                  <Form.Control\n                    name={`${fieldName}.firstName`}\n                    placeholder=\"Tom\"\n                    ref={register}\n                    type=\"string\"\n                  />\n                </Form.Group>\n                <Form.Group\n                  as={Col}\n                  controlId={`formContacts${`${index}`}LasttName`}\n                >\n                  <Form.Label>Last Name {`${index}`}</Form.Label>\n                  <Form.Control\n                    name={`${fieldName}.lastName`}\n                    placeholder=\"Smith\"\n                    ref={register}\n                    type=\"string\"\n                  />\n                </Form.Group>\n              </Form.Row>\n              <Form.Row>\n                <Form.Group\n                  as={Col}\n                  controlId={`formContacts${`${index}`}ProgramName`}\n                >\n                  <Form.Label>Program {`${index}`}</Form.Label>\n                  <Form.Control\n                    name={`${fieldName}.programName`}\n                    placeholder=\"Program Name\"\n                    ref={register}\n                    type=\"string\"\n                  />\n                </Form.Group>\n              </Form.Row>\n              <Form.Row>\n                <Form.Group\n                  as={Col}\n                  controlId={`formContacts${`${index}`}Position`}\n                >\n                  <Form.Label>Position {`${index}`}</Form.Label>\n                  <Form.Control\n                    name={`${fieldName}.position`}\n                    placeholder=\"Lead Coordinator\"\n                    ref={register}\n                    type=\"string\"\n                  />\n                </Form.Group>\n                <Form.Group\n                  as={Col}\n                  controlId={`formContacts${`${index}`}Email`}\n                >\n                  <Form.Label>Email {`${index}`}</Form.Label>\n                  <Form.Control\n                    name={`${fieldName}.email`}\n                    placeholder=\"example@gmail.com\"\n                    type=\"email\"\n                    ref={register}\n                  />\n                </Form.Group>\n              </Form.Row>\n              <Form.Row>\n                <Form.Group\n                  as={Col}\n                  controlId={`formContacts${`${index}`}Phone`}\n                >\n                  <Form.Label>Phone {`${index}`}</Form.Label>\n                  <Form.Control\n                    name={`${fieldName}.phone`}\n                    placeholder=\"111-222-4567\"\n                    ref={register}\n                    type=\"phone\"\n                  />\n                </Form.Group>\n                <Form.Group as={Col} controlId={`formContacts${`${index}`}Fax`}>\n                  <Form.Label>Fax {`${index}`}</Form.Label>\n                  <Form.Control\n                    name={`${fieldName}.fax`}\n                    placeholder=\"999-888-3433\"\n                    ref={register}\n                    type=\"phone\"\n                  />\n                </Form.Group>\n              </Form.Row>\n\n              <Form.Row>\n                <Form.Group\n                  as={Col}\n                  controlId={`formContacts${`${index}`}LastUpdatedBy`}\n                >\n                  {/* <Form.Label>{`${index}`}</Form.Label> */}\n                  <Form.Control\n                    name={`${fieldName}.lastUpdatedBy`}\n                    type=\"string\"\n                    value=\"Seed\"\n                    ref={register}\n                    readOnly\n                  />\n                </Form.Group>\n                <Form.Group\n                  as={Col}\n                  controlId={`formContacts${`${index}`}LastUpdatedDT`}\n                >\n                  {/* <Form.Label>AddressId</Form.Label> */}\n                  <Form.Control\n                    name={`${fieldName}.lastUpdatedDT`}\n                    type=\"string\"\n                    value={new Date().toLocaleString()}\n                    ref={register}\n                    readOnly\n                  />\n                </Form.Group>\n                <Button variant=\"danger\" onClick={removeContact(index)}>\n                  Remove\n                </Button>\n              </Form.Row>\n              <hr />\n            </div>\n          );\n        })}\n        {/* RESIDENCY TYPE */}\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formResidencyTypeId\">\n            <Form.Label>Program Categories</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name=\"residencyTypeId\"\n              ref={register}\n              //value={categories[0]}\n            >\n              {categories.map((category, index) => (\n                <option\n                  name=\"residencyTypeId\"\n                  key={`residencyTypeId.${category.categoryId}${index}`}\n                  value={category.categoryId}\n                  id={category.categoryId}\n                >\n                  {toTitleCase(category.categoryName.toString())}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n        </Form.Row>\n        <hr></hr>\n        {/* PROGRAM DETAILS */}\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formProgramDetailId\">\n            <Form.Label>Program Detail Id</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.programDetailId`}\n              type=\"string\"\n              value={uuidv4()}\n              ref={register}\n              readOnly\n            />\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"formProgramIdInProgramDetail\">\n            <Form.Label>Program Id</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.programId`}\n              type=\"string\"\n              value={programId}\n              ref={register}\n              readOnly\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formProgramDetailUrl\">\n            <Form.Label>URL</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.url`}\n              type=\"string\"\n              placeholder=\"Url\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formProgramDetailProgramCode\">\n            <Form.Label>Program Code</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.programCode`}\n              type=\"string\"\n              placeholder=\"Program Code\"\n              ref={register}\n            />\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"formProgramDetailYear\">\n            <Form.Label> Year </Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.year`}\n              type=\"number\"\n              placeholder=\"Program year\"\n              defaultValue=\"2021\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formProgramDetailLetterOfRec\">\n            <Form.Label>Letters of Rec</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name={`${detailsFieldName}.letterOfRec`}\n              ref={register}\n            >\n              {formSelect.map((selectOption, index) => (\n                <option\n                  name={`${detailsFieldName}.letterOfRec`}\n                  key={`programDetail.letterOfRec.${selectOption.name}${index}`}\n                  value={selectOption.value}\n                  id={selectOption.name}\n                >\n                  {selectOption.name}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n\n          <Form.Group as={Col} controlId=\"formProgramDetailNumberOfLetterOfRec\">\n            <Form.Label> Number of Letters </Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.numberOfLetterOfRec`}\n              type=\"string\"\n              ref={register}\n              defaultValue=\"\"\n              disabled={letterOfRec === 'Yes' ? false : true}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formProgramDetailLetterOfRecDetails\">\n            <Form.Label> Letter of Rec Details </Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.letterOfRecDetails`}\n              as=\"textarea\"\n              rows=\"2\"\n              placeholder=\"Enter details here...\"\n              defaultValue=\"\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group\n            as={Col}\n            controlId=\"formProgramDetailcomlexLevelOneAccepted\"\n          >\n            <Form.Label>Comlex Level 1 Accepted?</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name={`${detailsFieldName}.comlexLevelOneAccepted`}\n              ref={register}\n            >\n              {formSelect.map((selectOption, index) => (\n                <option\n                  name={`${detailsFieldName}.comlexLevelOneAccepted`}\n                  key={`programDetail.comlexLevelOneAccepted.${selectOption.name}${index}`}\n                  value={selectOption.value}\n                  id={selectOption.name}\n                >\n                  {selectOption.name}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n\n          <Form.Group\n            as={Col}\n            controlId=\"formProgramDetailComlexLevelOneMinimumScore\"\n          >\n            <Form.Label> Comlex 1 Min Score </Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.comlexLevelOneMininumScore`}\n              type=\"string\"\n              ref={register}\n              defaultValue=\"\"\n              disabled={complexLevelOneAccepted === 'Yes' ? false : true}\n            />\n          </Form.Group>\n          <Form.Group\n            as={Col}\n            controlId=\"formProgramDetailComlexLevelOneAverageScore\"\n          >\n            <Form.Label> Comlex 1 Avg Score </Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.comlexLevelOneAverageScore`}\n              type=\"string\"\n              ref={register}\n              defaultValue=\"\"\n              disabled={complexLevelOneAccepted === 'Yes' ? false : true}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group\n            as={Col}\n            controlId=\"formProgramDetailComlexLevelTwoComments\"\n          >\n            <Form.Label> Comlex Level 1 Comments </Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.comlexLevelOneComments`}\n              as=\"textarea\"\n              rows=\"2\"\n              placeholder=\"Enter comments here...\"\n              defaultValue=\"\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group\n            as={Col}\n            controlId=\"formProgramDetailcomlexLevelTwoAccepted\"\n          >\n            <Form.Label>Comlex Level 2 Accepted?</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name={`${detailsFieldName}.comlexLevelTwoAccepted`}\n              ref={register}\n            >\n              {formSelect.map((selectOption, index) => (\n                <option\n                  name={`${detailsFieldName}.comlexLevelTwoAccepted`}\n                  key={`programDetail.comlexLevelTwoAccepted.${selectOption.name}${index}`}\n                  value={selectOption.value}\n                  id={selectOption.name}\n                >\n                  {selectOption.name}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n\n          <Form.Group\n            as={Col}\n            controlId=\"formProgramDetailComlexLevelTwoMinimumScore\"\n          >\n            <Form.Label> Comlex 2 Min Score </Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.comlexLevelTwoMininumScore`}\n              type=\"string\"\n              ref={register}\n              defaultValue=\"\"\n              disabled={complexLevelTwoAccepted === 'Yes' ? false : true}\n            />\n          </Form.Group>\n          <Form.Group\n            as={Col}\n            controlId=\"formProgramDetailComlexLevelTwoAverageScore\"\n          >\n            <Form.Label> Comlex 2 Avg Score </Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.comlexLevelTwoAverageScore`}\n              type=\"string\"\n              ref={register}\n              defaultValue=\"\"\n              disabled={complexLevelTwoAccepted === 'Yes' ? false : true}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group\n            as={Col}\n            controlId=\"formProgramDetailComlexLevelTwoComments\"\n          >\n            <Form.Label> Comlex Level 2 Comments </Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.comlexLevelTwoComments`}\n              as=\"textarea\"\n              rows=\"2\"\n              placeholder=\"Enter comments here...\"\n              defaultValue=\"\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group\n            as={Col}\n            controlId=\"formProgramDetailUSMLELevelOneAccepted\"\n          >\n            <Form.Label>USMLE Level 1 Accepted?</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name={`${detailsFieldName}.usmleLevelOneAccepted`}\n              ref={register}\n            >\n              {formSelect.map((selectOption, index) => (\n                <option\n                  name={`${detailsFieldName}.usmleLevelOneAccepted`}\n                  key={`programDetail.usmleLevelOneAccepted.${selectOption.name}${index}`}\n                  value={selectOption.value}\n                  id={selectOption.name}\n                >\n                  {selectOption.name}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n\n          <Form.Group\n            as={Col}\n            controlId=\"formProgramDetailUSMLELevelOneMinimumScore\"\n          >\n            <Form.Label> USMLE 1 Min Score </Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.comlexLevelOneMininumScore`}\n              type=\"string\"\n              ref={register}\n              defaultValue=\"\"\n              disabled={usmleLevelOneAccepted === 'Yes' ? false : true}\n            />\n          </Form.Group>\n          <Form.Group\n            as={Col}\n            controlId=\"formProgramDetailComlexLevelOneAverageScore\"\n          >\n            <Form.Label> USMLE 1 Avg Score </Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.comlexLevelOneAverageScore`}\n              type=\"string\"\n              ref={register}\n              defaultValue=\"\"\n              disabled={usmleLevelOneAccepted === 'Yes' ? false : true}\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group\n            as={Col}\n            controlId=\"formProgramDetailUSMLELevelOneComments\"\n          >\n            <Form.Label> USMLE Level 1 Comments </Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.usmleLevelOneComments`}\n              as=\"textarea\"\n              rows=\"2\"\n              placeholder=\"Enter comments here...\"\n              defaultValue=\"\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group\n            as={Col}\n            controlId=\"formProgramDetailUSMLELevelTwoAccepted\"\n          >\n            <Form.Label>USMLE Level 2 Accepted?</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name={`${detailsFieldName}.usmleLevelTwoAccepted`}\n              ref={register}\n            >\n              {formSelect.map((selectOption, index) => (\n                <option\n                  name={`${detailsFieldName}.usmleLevelTwoAccepted`}\n                  key={`programDetail.usmleLevelTwoAccepted.${selectOption.name}${index}`}\n                  value={selectOption.value}\n                  id={selectOption.name}\n                >\n                  {selectOption.name}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n\n          <Form.Group\n            as={Col}\n            controlId=\"formProgramDetailUSMLELevelTwoMinimumScore\"\n          >\n            <Form.Label> USMLE 2 Min Score </Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.usmleLevelTwoMininumScore`}\n              type=\"string\"\n              ref={register}\n              defaultValue=\"\"\n              disabled={usmleLevelTwoAccepted === 'Yes' ? false : true}\n            />\n          </Form.Group>\n          <Form.Group\n            as={Col}\n            controlId=\"formProgramDetailUSMLELevelTwoAverageScore\"\n          >\n            <Form.Label> USMLE 2 Avg Score </Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.usmleLevelTwoAverageScore`}\n              type=\"string\"\n              ref={register}\n              defaultValue=\"\"\n              disabled={usmleLevelTwoAccepted === 'Yes' ? false : true}\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group\n            as={Col}\n            controlId=\"formProgramDetailUSMLELevelTwoComments\"\n          >\n            <Form.Label> USMLE Level 2 Comments </Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.usmleLevelTwoComments`}\n              as=\"textarea\"\n              rows=\"2\"\n              placeholder=\"Enter comments here...\"\n              defaultValue=\"\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formProgramDetailPhoto\">\n            <Form.Label>Photo?</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name={`${detailsFieldName}.photo`}\n              ref={register}\n            >\n              {formSelect.map((selectOption, index) => (\n                <option\n                  name={`${detailsFieldName}.photo`}\n                  key={`programDetail.photo.${selectOption.name}${index}`}\n                  value={selectOption.value}\n                  id={selectOption.name}\n                >\n                  {selectOption.name}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"formProgramDetailCV\">\n            <Form.Label>CV?</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name={`${detailsFieldName}.cv`}\n              ref={register}\n            >\n              {formSelect.map((selectOption, index) => (\n                <option\n                  name={`${detailsFieldName}.cv`}\n                  key={`programDetail.cv.${selectOption.name}${index}`}\n                  value={selectOption.value}\n                  id={selectOption.name}\n                >\n                  {selectOption.name}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group md={3} as={Col} controlId=\"formProgramDetailDeansLetter\">\n            <Form.Label>Dean's Letter?</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name={`${detailsFieldName}.deansLetter`}\n              ref={register}\n            >\n              {formSelect.map((selectOption, index) => (\n                <option\n                  name={`${detailsFieldName}.deansLetter`}\n                  key={`programDetail.deansLetter.${selectOption.name}${index}`}\n                  value={selectOption.value}\n                  id={selectOption.name}\n                >\n                  {selectOption.name}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group\n            md={9}\n            as={Col}\n            controlId=\"formProgramDetailDeansLetterComments\"\n          >\n            <Form.Label>Dean's Letter Comments</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.deansLetterComments`}\n              type=\"string\"\n              placeholder=\"Dean's Letter comments\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group md={3} as={Col} controlId=\"formProgramDetailTranscript\">\n            <Form.Label>Transcript?</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name={`${detailsFieldName}.transcript`}\n              ref={register}\n            >\n              {formSelect.map((selectOption, index) => (\n                <option\n                  name={`${detailsFieldName}.transcript`}\n                  key={`programDetail.transcript.${selectOption.name}${index}`}\n                  value={selectOption.value}\n                  id={selectOption.name}\n                >\n                  {selectOption.name}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group\n            md={9}\n            as={Col}\n            controlId=\"formProgramDetailTranscriptComments\"\n          >\n            <Form.Label>Transcript Comments</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.transcriptComments`}\n              type=\"string\"\n              placeholder=\"Transcript comments\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group\n            md={3}\n            as={Col}\n            controlId=\"formProgramDetailPersonalStatement\"\n          >\n            <Form.Label>Personal Statement?</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name={`${detailsFieldName}.personalStatement`}\n              ref={register}\n            >\n              {formSelect.map((selectOption, index) => (\n                <option\n                  name={`${detailsFieldName}.personalStatement`}\n                  key={`programDetail.personalStatement.${selectOption.name}${index}`}\n                  value={selectOption.value}\n                  id={selectOption.name}\n                >\n                  {selectOption.name}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group\n            md={9}\n            as={Col}\n            controlId=\"formProgramDetail.personalStatementComments\"\n          >\n            <Form.Label>Personal Statement Comments</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.personalStatementComments`}\n              type=\"string\"\n              placeholder=\"Personal Statement comments\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group md={3} as={Col} controlId=\"formProgramDetailResearch\">\n            <Form.Label>Research?</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name={`${detailsFieldName}.research`}\n              ref={register}\n            >\n              {formSelect.map((selectOption, index) => (\n                <option\n                  name={`${detailsFieldName}.research`}\n                  key={`programDetail.research.${selectOption.name}${index}`}\n                  value={selectOption.value}\n                  id={selectOption.name}\n                >\n                  {selectOption.name}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group\n            md={9}\n            as={Col}\n            controlId=\"formProgramDetailResearchComments\"\n          >\n            <Form.Label>Research Comments</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.researchComments`}\n              type=\"string\"\n              placeholder=\"Research comments\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group md={3} as={Col} controlId=\"formProgramAuditionRotation\">\n            <Form.Label>Audition Rotation?</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name={`${detailsFieldName}.auditionRotation`}\n              ref={register}\n            >\n              {formSelect.map((selectOption, index) => (\n                <option\n                  name={`${detailsFieldName}.auditionRotation`}\n                  key={`programDetail.auditionRotation.${selectOption.name}${index}`}\n                  value={selectOption.value}\n                  id={selectOption.name}\n                >\n                  {selectOption.name}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group\n            md={9}\n            as={Col}\n            controlId=\"formProgramDetailAuditionRotationComments\"\n          >\n            <Form.Label>Audition Rotation Comments</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.auditionRotationComments`}\n              type=\"string\"\n              placeholder=\"Audition Rotation comments\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group md={3} as={Col} controlId=\"formProgramDOFriendly\">\n            <Form.Label>DO Friendly?</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name={`${detailsFieldName}.doFriendly`}\n              ref={register}\n            >\n              {formSelect.map((selectOption, index) => (\n                <option\n                  name={`${detailsFieldName}.doFriendly`}\n                  key={`programDetail.doFriendly.${selectOption.name}${index}`}\n                  value={selectOption.value}\n                  id={selectOption.name}\n                >\n                  {selectOption.name}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group\n            md={9}\n            as={Col}\n            controlId=\"formProgramDetailDOFriendlyComments\"\n          >\n            <Form.Label>DO Friendly Comments</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.doFriendlyComments`}\n              type=\"string\"\n              placeholder=\"DO Friendly comments\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group md={3} as={Col} controlId=\"formProgramIMSFriendly\">\n            <Form.Label>IMS Friendly?</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name={`${detailsFieldName}.imsFriendly`}\n              ref={register}\n            >\n              {formSelect.map((selectOption, index) => (\n                <option\n                  name={`${detailsFieldName}.imsFriendly`}\n                  key={`programDetail.imsFriendly.${selectOption.name}${index}`}\n                  value={selectOption.value}\n                  id={selectOption.name}\n                >\n                  {selectOption.name}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group\n            md={9}\n            as={Col}\n            controlId=\"formProgramDetailIMSFriendlyComments\"\n          >\n            <Form.Label>IMS Friendly Comments</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.imsFriendlyComments`}\n              type=\"string\"\n              placeholder=\"IMS Friendly comments\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group md={3} as={Col} controlId=\"formProgramERASApplication\">\n            <Form.Label>ERAS Application?</Form.Label>\n            <Form.Control\n              as=\"select\"\n              name={`${detailsFieldName}.erasApplication`}\n              ref={register}\n            >\n              {formSelect.map((selectOption, index) => (\n                <option\n                  name={`${detailsFieldName}.erasApplication`}\n                  key={`programDetail.erasApplication.${selectOption.name}${index}`}\n                  value={selectOption.value}\n                  id={selectOption.name}\n                >\n                  {selectOption.name}\n                </option>\n              ))}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group\n            md={9}\n            as={Col}\n            controlId=\"formProgramDetailERASApplicationComments\"\n          >\n            <Form.Label>ERAS Application Comments</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.erasApplicationComments`}\n              type=\"string\"\n              placeholder=\"ERAS Application comments\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formProgramDetailERASApplicationDate\">\n            <Form.Label>Application Date Deadline</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.erasApplicationDate`}\n              type=\"string\"\n              placeholder=\"1/1/2020\"\n              ref={register}\n            />\n          </Form.Group>\n          <Form.Group\n            as={Col}\n            controlId=\"formProgramDetailNumberOfApplicationsAccepted\"\n          >\n            <Form.Label> Number of Apps Accepted </Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.numberOfApplicationsAccepted`}\n              type=\"number\"\n              placeholder=\"20\"\n              defaultValue=\"\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          {' '}\n          <Form.Group as={Col} controlId=\"formProgramDetailOtherCommentsOne\">\n            <Form.Label> Other Comments 1</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.otherCommentsOne`}\n              as=\"textarea\"\n              rows=\"2\"\n              placeholder=\"Enter comments here...\"\n              defaultValue=\"\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          {' '}\n          <Form.Group as={Col} controlId=\"formProgramDetailOtherCommentsTwo\">\n            <Form.Label> Other Comments 2</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.otherCommentsTwo`}\n              as=\"textarea\"\n              rows=\"2\"\n              placeholder=\"Enter comments here...\"\n              defaultValue=\"\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          {' '}\n          <Form.Group as={Col} controlId=\"formProgramDetailOtherCommentsThree\">\n            <Form.Label> Other Comments 3</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.otherCommentsThree`}\n              as=\"textarea\"\n              rows=\"2\"\n              placeholder=\"Enter comments here...\"\n              defaultValue=\"\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          {' '}\n          <Form.Group as={Col} controlId=\"formProgramDetailOtherCommentsFour\">\n            <Form.Label> Other Comments 4</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.otherCommentsFour`}\n              as=\"textarea\"\n              rows=\"2\"\n              placeholder=\"Enter comments here...\"\n              defaultValue=\"\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          {' '}\n          <Form.Group as={Col} controlId=\"formProgramDetailOtherCommentsFive\">\n            <Form.Label> Other Comments 5</Form.Label>\n            <Form.Control\n              name={`${detailsFieldName}.otherCommentsFive`}\n              as=\"textarea\"\n              rows=\"2\"\n              placeholder=\"Enter comments here...\"\n              defaultValue=\"\"\n              ref={register}\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formLastUpdatedByProgramDetail\">\n            {/* <Form.Label>Last</Form.Label> */}\n            <Form.Control\n              name={`${detailsFieldName}.lastUpdatedBy`}\n              type=\"string\"\n              value=\"Seed\"\n              ref={register}\n              readOnly\n            />\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"formLastUpdatedDateProgramDetail\">\n            {/* <Form.Label>AddressId</Form.Label> */}\n            <Form.Control\n              name={`${detailsFieldName}.lastUpdatedDT`}\n              type=\"string\"\n              value={new Date().toLocaleString()}\n              ref={register}\n              readOnly\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <hr></hr>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formLastUpdatedBy\">\n            {/* <Form.Label>Last</Form.Label> */}\n            <Form.Control\n              name=\"lastUpdatedBy\"\n              type=\"string\"\n              value=\"Seed\"\n              ref={register}\n              readOnly\n            />\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"formLastUpdatedDt\">\n            {/* <Form.Label>AddressId</Form.Label> */}\n            <Form.Control\n              name=\"lastUpdatedDT\"\n              type=\"string\"\n              value={new Date().toLocaleString()}\n              ref={register}\n              readOnly\n            />\n          </Form.Group>\n        </Form.Row>\n        <Button variant=\"secondary\" onClick={addContact}>\n          Add Contact\n        </Button>\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </div>\n  );\n};\nexport default AddProgram;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useForm } from 'react-hook-form';\nimport { Form, Col, Button } from 'react-bootstrap';\nimport { states as statesList } from './../components/states';\nimport { toTitleCase } from './../utils/common';\nimport { useAuth0 } from '../contexts/auth0-context';\nimport { useHistory } from 'react-router-dom';\n\nconst EditProgram = (props) => {\n  const { programId } = props.match.params;\n  const { register, handleSubmit, reset } = useForm();\n  const [data, setData] = useState({});\n  const [indexes, setIndexes] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [counter, setCounter] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const { getTokenSilently } = useAuth0();\n  const history = useHistory();\n\n  const onSubmit = async (data) => {\n    try {\n      const token = await getTokenSilently({\n        scope: 'read:status, write:program',\n        audience: 'https://github.com/tguar/ResidencyAPI',\n      });\n\n      axios\n        .put(\n          `https://residency.azurewebsites.net/programs/${data.programId}`,\n          data,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              crossDomain: true,\n              withCredentials: true,\n              'Content-Type': 'application/json',\n            },\n          }\n        )\n        .then(history.push('/marketplace'))\n        .catch((e) => console.log(e));\n      // const responseData = { result: 'womp' };\n      // const responseData = await response;\n      // console.log(responseData.text());\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const addContact = () => {\n    setIndexes((prevIndexes) => [...prevIndexes, counter]);\n    setCounter((prevCounter) => prevCounter + 1);\n  };\n\n  const removeContact = (index) => () => {\n    setIndexes((prevIndexes) => [\n      ...prevIndexes.filter((item) => item !== index),\n    ]);\n    setCounter((prevCounter) => prevCounter - 1);\n  };\n\n  if (counter < 1) {\n    addContact();\n  }\n\n  useEffect(() => {\n    let current = true;\n    if (current) {\n      axios({\n        method: 'get',\n        baseURL: `https://residency.azurewebsites.net/programs/${programId}`,\n      })\n        .then((response) => {\n          setData({ ...response.data });\n          reset({ ...response.data });\n          console.log(response.data);\n          setIsLoading(false);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n      return () => (current = false);\n    }\n  }, [programId, reset]);\n\n  useEffect(() => {\n    // https://residency.azurewebsites.net/swagger/index.html\n    let current = true;\n    if (current) {\n      axios({\n        method: 'get',\n        baseURL: 'https://residency.azurewebsites.net/categories',\n      })\n        .then((response) => {\n          setCategories([...response.data]);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n      return () => (current = false);\n    }\n  }, []);\n\n  // useEffect(() => {\n  //   const reset = () => {\n  //     const result = fetch(\n  //       'https://residency.azurewebsites.net/programs/881c96e6-b66c-401b-8c35-9347d6204d47'\n  //     ); // result: { firstName: 'test', lastName: 'test2' }\n  //     reset(result);\n  //   }; // asynchronously reset your form values\n  // }, [reset]);\n\n  return (\n    <div className=\"col-md-8 offset-md-2\">\n      {isLoading ? (\n        <h3>Loading...</h3>\n      ) : (\n        <Form onSubmit={handleSubmit(onSubmit)}>\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formProgramId\">\n              <Form.Label>ProgramId</Form.Label>\n              <Form.Control\n                name=\"programId\"\n                type=\"string\"\n                value={programId}\n                ref={register}\n                readOnly\n              />\n            </Form.Group>\n\n            <Form.Group as={Col} controlId=\"formProgramName\">\n              <Form.Label>Program Name</Form.Label>\n              <Form.Control\n                name=\"programName\"\n                type=\"string\"\n                placeholder=\"Program Name\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formProgramIdInAddress\">\n              <Form.Label>ProgramId</Form.Label>\n              <Form.Control\n                name=\"address.programId\"\n                type=\"string\"\n                value={programId}\n                ref={register}\n                readOnly\n              />\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"formAddressId\">\n              <Form.Label>AddressId</Form.Label>\n              <Form.Control\n                name=\"address.addressId\"\n                type=\"string\"\n                ref={register}\n                readOnly\n              />\n            </Form.Group>\n          </Form.Row>\n          <hr></hr>\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formAddressLineOne\">\n              <Form.Label>Address Line 1</Form.Label>\n              <Form.Control\n                name=\"address.addressLineOne\"\n                placeholder=\"1234 Main St\"\n                ref={register}\n              />\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"formAddressLineTwo\">\n              <Form.Label>Address Line 2</Form.Label>\n              <Form.Control\n                name=\"address.addressLineTwo\"\n                placeholder=\"Apartment, studio, or floor\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formCity\">\n              <Form.Label>City</Form.Label>\n              <Form.Control name=\"address.city\" ref={register} />\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"formState\">\n              <Form.Label>State</Form.Label>\n              <Form.Control as=\"select\" name=\"address.state\" ref={register}>\n                {statesList.map((state, index) => (\n                  <option\n                    name=\"address.state\"\n                    key={`stateAddressDropdownKey.${index}`}\n                    value={state.abbreviation}\n                    id={`stateAddressDropdown.${index}`}\n                  >\n                    {state.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"formZip\">\n              <Form.Label>Zip</Form.Label>\n              <Form.Control\n                name=\"address.zipCode\"\n                type=\"string\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formLatitude\">\n              <Form.Label>Latitude</Form.Label>\n              <Form.Control\n                name=\"address.latitude\"\n                placeholder=\"\"\n                ref={register}\n              />\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"formLongitude\">\n              <Form.Label>Longitude</Form.Label>\n              <Form.Control\n                name=\"address.longitude\"\n                placeholder=\"\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formLastUpdatedByAddress\">\n              {/* <Form.Label>Last</Form.Label> */}\n              <Form.Control\n                name=\"address.lastUpdatedBy\"\n                type=\"string\"\n                value=\"Seed\"\n                ref={register}\n                readOnly\n              />\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"formLastUpdatedDate\">\n              {/* <Form.Label>AddressId</Form.Label> */}\n              <Form.Control\n                name=\"address.lastUpdatedDT\"\n                type=\"string\"\n                value={new Date().toLocaleString()}\n                ref={register}\n                readOnly\n              />\n            </Form.Group>\n          </Form.Row>\n\n          <hr></hr>\n          {/* CONTACTS */}\n\n          {data.contacts.map((contact, index) => {\n            const fieldName = `contacts[${index}]`;\n            return (\n              <div key={`contacts.${index}`}>\n                <Form.Row>\n                  {/* <Form.Group\n                  as={Col}\n                  controlId={`formProgramIdcontacts[${index}]`}\n                >\n                  <Form.Label>ProgramId</Form.Label>\n                  <Form.Control\n                    name={`${fieldName}.programId`}\n                    type=\"string\"\n                    value={programId}\n                    ref={register}\n                    readOnly\n                  />\n                </Form.Group> */}\n                  <Form.Group\n                    as={Col}\n                    controlId={`formContacts${`${index}`}Id`}\n                  >\n                    <Form.Label>Contact {index}</Form.Label>\n                    {/* <Form.Control\n                    name={`${fieldName}.Id`}\n                    type=\"string\"\n                    value={`${fieldName}`}\n                    readOnly\n                  /> */}\n                  </Form.Group>\n                  <Form.Group\n                    as={Col}\n                    controlId={`formContacts${`${index}`}ContactId`}\n                  >\n                    <Form.Label>ContactId</Form.Label>\n                    <Form.Control\n                      name={`${fieldName}.contactId`}\n                      type=\"string\"\n                      ref={register}\n                      readOnly\n                    />\n                  </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                  <Form.Group\n                    as={Col}\n                    controlId={`formContacts${`${index}`}FirstName`}\n                  >\n                    <Form.Label>First Name {index}</Form.Label>\n                    <Form.Control\n                      name={`${fieldName}.firstName`}\n                      placeholder=\"Tom\"\n                      ref={register}\n                      type=\"string\"\n                    />\n                  </Form.Group>\n                  <Form.Group\n                    as={Col}\n                    controlId={`formContacts${`${index}`}LasttName`}\n                  >\n                    <Form.Label>Last Name {index}</Form.Label>\n                    <Form.Control\n                      name={`${fieldName}.lastName`}\n                      placeholder=\"Smith\"\n                      ref={register}\n                      type=\"string\"\n                    />\n                  </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                  <Form.Group\n                    as={Col}\n                    controlId={`formContacts${`${index}`}ProgramName`}\n                  >\n                    <Form.Label>Program {index}</Form.Label>\n                    <Form.Control\n                      name={`${fieldName}.programName`}\n                      placeholder=\"Program Name\"\n                      ref={register}\n                      type=\"string\"\n                    />\n                  </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                  <Form.Group\n                    as={Col}\n                    controlId={`formContacts${`${index}`}Position`}\n                  >\n                    <Form.Label>Position {index}</Form.Label>\n                    <Form.Control\n                      name={`${fieldName}.position`}\n                      placeholder=\"Lead Coordinator\"\n                      ref={register}\n                      type=\"string\"\n                    />\n                  </Form.Group>\n                  <Form.Group\n                    as={Col}\n                    controlId={`formContacts${`${index}`}Email`}\n                  >\n                    <Form.Label>Email {index}</Form.Label>\n                    <Form.Control\n                      name={`${fieldName}.email`}\n                      placeholder=\"example@gmail.com\"\n                      type=\"email\"\n                      ref={register}\n                    />\n                  </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                  <Form.Group\n                    as={Col}\n                    controlId={`formContacts${`${index}`}Phone`}\n                  >\n                    <Form.Label>Phone {index}</Form.Label>\n                    <Form.Control\n                      name={`${fieldName}.phone`}\n                      placeholder=\"111-222-4567\"\n                      ref={register}\n                      type=\"phone\"\n                    />\n                  </Form.Group>\n                  <Form.Group\n                    as={Col}\n                    controlId={`formContacts${`${index}`}Fax`}\n                  >\n                    <Form.Label>Fax {index}</Form.Label>\n                    <Form.Control\n                      name={`${fieldName}.fax`}\n                      placeholder=\"999-888-3433\"\n                      ref={register}\n                      type=\"phone\"\n                    />\n                  </Form.Group>\n                </Form.Row>\n\n                <Form.Row>\n                  <Form.Group\n                    as={Col}\n                    controlId={`formContacts${`${index}`}LastUpdatedBy`}\n                  >\n                    {/* <Form.Label>{`${index}`}</Form.Label> */}\n                    <Form.Control\n                      name={`${fieldName}.lastUpdatedBy`}\n                      type=\"string\"\n                      value=\"Seed\"\n                      ref={register}\n                      readOnly\n                    />\n                  </Form.Group>\n                  <Form.Group\n                    as={Col}\n                    controlId={`formContacts${`${index}`}LastUpdatedDT`}\n                  >\n                    {/* <Form.Label>AddressId</Form.Label> */}\n                    <Form.Control\n                      name={`${fieldName}.lastUpdatedDT`}\n                      type=\"string\"\n                      value={new Date().toLocaleString()}\n                      ref={register}\n                      readOnly\n                    />\n                  </Form.Group>\n                  {/* <Button variant=\"danger\" onClick={removeContact(index)}>\n                  Remove\n                </Button> */}\n                </Form.Row>\n                <hr />\n              </div>\n            );\n          })}\n          {/* RESIDENCY TYPE */}\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formResidencyTypeId\">\n              <Form.Label>Program Categories</Form.Label>\n              <Form.Control\n                as=\"select\"\n                name=\"residencyTypeId\"\n                ref={register}\n                //value={categories[0]}\n              >\n                {categories.map((category, index) => (\n                  <option\n                    name=\"residencyTypeId\"\n                    key={`residencyTypeId.${category.categoryId}${index}`}\n                    value={category.categoryId}\n                    id={category.categoryId}\n                  >\n                    {toTitleCase(category.categoryName.toString())}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n          </Form.Row>\n          <hr></hr>\n          <Button variant=\"primary\" type=\"submit\">\n            Submit\n          </Button>\n        </Form>\n      )}\n    </div>\n  );\n};\n\nexport default EditProgram;\n","import React from 'react';\n\nconst AddProgramDetail = () => (\n  <section>\n    <h1 className=\"AddProgramDetail__Heading\">Add Program Detail</h1>\n  </section>\n);\n\nexport default AddProgramDetail;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useForm } from 'react-hook-form';\nimport { Form, Col, Button } from 'react-bootstrap';\nimport { useAuth0 } from '../contexts/auth0-context';\nimport { formSelect } from './../components/formSelect';\nimport { useHistory } from 'react-router-dom';\n\nconst EditProgramDetail = (props) => {\n  const { programDetailId } = props.match.params;\n  const [data, setData] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const { getTokenSilently } = useAuth0();\n  const history = useHistory();\n  const [categories, setCategories] = useState([]);\n  const { register, handleSubmit, watch, reset } = useForm();\n  const letterOfRec = watch(`letterOfRec`);\n  const complexLevelOneAccepted = watch(`comlexLevelOneAccepted`);\n  const complexLevelTwoAccepted = watch(`comlexLevelTwoAccepted`);\n  const usmleLevelOneAccepted = watch(`usmleLevelOneAccepted`);\n  const usmleLevelTwoAccepted = watch(`usmleLevelTwoAccepted`);\n\n  const onSubmit = async (data) => {\n    try {\n      const token = await getTokenSilently({\n        scope: 'read:status, write:program',\n        audience: 'https://github.com/tguar/ResidencyAPI',\n      });\n\n      axios\n        .put(\n          `https://residency.azurewebsites.net/programDetails/${data.programDetailId}`,\n          data,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              crossDomain: true,\n              withCredentials: true,\n              'Content-Type': 'application/json',\n            },\n          }\n        )\n        .then(history.push('/marketplace'))\n        .catch((e) => console.log(e));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // const onSubmit = (data) => {\n  //   console.log(JSON.stringify(data));\n  // };\n\n  useEffect(() => {\n    let current = true;\n    if (current) {\n      axios({\n        method: 'get',\n        baseURL: `https://residency.azurewebsites.net/programDetails/${programDetailId}`,\n      })\n        .then((response) => {\n          setData({ ...response.data });\n          reset({ ...response.data });\n          setIsLoading(false);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n      return () => (current = false);\n    }\n  }, [programDetailId, reset]);\n\n  useEffect(() => {\n    let current = true;\n    if (current) {\n      axios({\n        method: 'get',\n        baseURL: 'https://residency.azurewebsites.net/categories',\n      })\n        .then((response) => {\n          setCategories([...response.data]);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n      return () => (current = false);\n    }\n  }, []);\n\n  return (\n    <div className=\"col-md-8 offset-md-2\">\n      {isLoading ? (\n        <h3>Loading...</h3>\n      ) : (\n        <Form onSubmit={handleSubmit(onSubmit)}>\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formProgramDetailId\">\n              <Form.Label>Program Detail Id</Form.Label>\n              <Form.Control\n                name={`programDetailId`}\n                type=\"string\"\n                // value={program}\n                ref={register}\n                readOnly\n              />\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"formProgramIdInProgramDetail\">\n              <Form.Label>Program Id</Form.Label>\n              <Form.Control\n                name={`programId`}\n                type=\"string\"\n                // value={programId}\n                ref={register}\n                readOnly\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formProgramDetailUrl\">\n              <Form.Label>URL</Form.Label>\n              <Form.Control\n                name={`url`}\n                type=\"string\"\n                placeholder=\"Url\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formProgramDetailProgramCode\">\n              <Form.Label>Program Code</Form.Label>\n              <Form.Control\n                name={`programCode`}\n                type=\"string\"\n                placeholder=\"Program Code\"\n                ref={register}\n              />\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"formProgramDetailYear\">\n              <Form.Label> Year </Form.Label>\n              <Form.Control\n                name={`year`}\n                type=\"number\"\n                placeholder=\"Program year\"\n                defaultValue=\"2021\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formProgramDetailLetterOfRec\">\n              <Form.Label>Letters of Rec</Form.Label>\n              <Form.Control as=\"select\" name={`letterOfRec`} ref={register}>\n                {formSelect.map((selectOption, index) => (\n                  <option\n                    name={`letterOfRec`}\n                    key={`programDetail.letterOfRec.${selectOption.name}${index}`}\n                    value={selectOption.value}\n                    id={selectOption.name}\n                  >\n                    {selectOption.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailNumberOfLetterOfRec\"\n            >\n              <Form.Label> Number of Letters </Form.Label>\n              <Form.Control\n                name={`numberOfLetterOfRec`}\n                type=\"string\"\n                ref={register}\n                defaultValue=\"\"\n                disabled={letterOfRec === 'Yes' ? false : true}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailLetterOfRecDetails\"\n            >\n              <Form.Label> Letter of Rec Details </Form.Label>\n              <Form.Control\n                name={`letterOfRecDetails`}\n                as=\"textarea\"\n                rows=\"2\"\n                placeholder=\"Enter details here...\"\n                defaultValue=\"\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailcomlexLevelOneAccepted\"\n            >\n              <Form.Label>Comlex Level 1 Accepted?</Form.Label>\n              <Form.Control\n                as=\"select\"\n                name={`comlexLevelOneAccepted`}\n                ref={register}\n              >\n                {formSelect.map((selectOption, index) => (\n                  <option\n                    name={`comlexLevelOneAccepted`}\n                    key={`programDetail.comlexLevelOneAccepted.${selectOption.name}${index}`}\n                    value={selectOption.value}\n                    id={selectOption.name}\n                  >\n                    {selectOption.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailComlexLevelOneMinimumScore\"\n            >\n              <Form.Label> Comlex 1 Min Score </Form.Label>\n              <Form.Control\n                name={`comlexLevelOneMininumScore`}\n                type=\"string\"\n                ref={register}\n                defaultValue=\"\"\n                disabled={complexLevelOneAccepted === 'Yes' ? false : true}\n              />\n            </Form.Group>\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailComlexLevelOneAverageScore\"\n            >\n              <Form.Label> Comlex 1 Avg Score </Form.Label>\n              <Form.Control\n                name={`comlexLevelOneAverageScore`}\n                type=\"string\"\n                ref={register}\n                defaultValue=\"\"\n                disabled={complexLevelOneAccepted === 'Yes' ? false : true}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailComlexLevelTwoComments\"\n            >\n              <Form.Label> Comlex Level 1 Comments </Form.Label>\n              <Form.Control\n                name={`comlexLevelOneComments`}\n                as=\"textarea\"\n                rows=\"2\"\n                placeholder=\"Enter comments here...\"\n                defaultValue=\"\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailcomlexLevelTwoAccepted\"\n            >\n              <Form.Label>Comlex Level 2 Accepted?</Form.Label>\n              <Form.Control\n                as=\"select\"\n                name={`comlexLevelTwoAccepted`}\n                ref={register}\n              >\n                {formSelect.map((selectOption, index) => (\n                  <option\n                    name={`comlexLevelTwoAccepted`}\n                    key={`programDetail.comlexLevelTwoAccepted.${selectOption.name}${index}`}\n                    value={selectOption.value}\n                    id={selectOption.name}\n                  >\n                    {selectOption.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailComlexLevelTwoMinimumScore\"\n            >\n              <Form.Label> Comlex 2 Min Score </Form.Label>\n              <Form.Control\n                name={`comlexLevelTwoMininumScore`}\n                type=\"string\"\n                ref={register}\n                defaultValue=\"\"\n                disabled={complexLevelTwoAccepted === 'Yes' ? false : true}\n              />\n            </Form.Group>\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailComlexLevelTwoAverageScore\"\n            >\n              <Form.Label> Comlex 2 Avg Score </Form.Label>\n              <Form.Control\n                name={`comlexLevelTwoAverageScore`}\n                type=\"string\"\n                ref={register}\n                defaultValue=\"\"\n                disabled={complexLevelTwoAccepted === 'Yes' ? false : true}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailComlexLevelTwoComments\"\n            >\n              <Form.Label> Comlex Level 2 Comments </Form.Label>\n              <Form.Control\n                name={`comlexLevelTwoComments`}\n                as=\"textarea\"\n                rows=\"2\"\n                placeholder=\"Enter comments here...\"\n                defaultValue=\"\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailUSMLELevelOneAccepted\"\n            >\n              <Form.Label>USMLE Level 1 Accepted?</Form.Label>\n              <Form.Control\n                as=\"select\"\n                name={`usmleLevelOneAccepted`}\n                ref={register}\n              >\n                {formSelect.map((selectOption, index) => (\n                  <option\n                    name={`usmleLevelOneAccepted`}\n                    key={`programDetail.usmleLevelOneAccepted.${selectOption.name}${index}`}\n                    value={selectOption.value}\n                    id={selectOption.name}\n                  >\n                    {selectOption.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailUSMLELevelOneMinimumScore\"\n            >\n              <Form.Label> USMLE 1 Min Score </Form.Label>\n              <Form.Control\n                name={`comlexLevelOneMininumScore`}\n                type=\"string\"\n                ref={register}\n                defaultValue=\"\"\n                disabled={usmleLevelOneAccepted === 'Yes' ? false : true}\n              />\n            </Form.Group>\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailComlexLevelOneAverageScore\"\n            >\n              <Form.Label> USMLE 1 Avg Score </Form.Label>\n              <Form.Control\n                name={`comlexLevelOneAverageScore`}\n                type=\"string\"\n                ref={register}\n                defaultValue=\"\"\n                disabled={usmleLevelOneAccepted === 'Yes' ? false : true}\n              />\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailUSMLELevelOneComments\"\n            >\n              <Form.Label> USMLE Level 1 Comments </Form.Label>\n              <Form.Control\n                name={`usmleLevelOneComments`}\n                as=\"textarea\"\n                rows=\"2\"\n                placeholder=\"Enter comments here...\"\n                defaultValue=\"\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailUSMLELevelTwoAccepted\"\n            >\n              <Form.Label>USMLE Level 2 Accepted?</Form.Label>\n              <Form.Control\n                as=\"select\"\n                name={`usmleLevelTwoAccepted`}\n                ref={register}\n              >\n                {formSelect.map((selectOption, index) => (\n                  <option\n                    name={`usmleLevelTwoAccepted`}\n                    key={`programDetail.usmleLevelTwoAccepted.${selectOption.name}${index}`}\n                    value={selectOption.value}\n                    id={selectOption.name}\n                  >\n                    {selectOption.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailUSMLELevelTwoMinimumScore\"\n            >\n              <Form.Label> USMLE 2 Min Score </Form.Label>\n              <Form.Control\n                name={`usmleLevelTwoMininumScore`}\n                type=\"string\"\n                ref={register}\n                defaultValue=\"\"\n                disabled={usmleLevelTwoAccepted === 'Yes' ? false : true}\n              />\n            </Form.Group>\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailUSMLELevelTwoAverageScore\"\n            >\n              <Form.Label> USMLE 2 Avg Score </Form.Label>\n              <Form.Control\n                name={`usmleLevelTwoAverageScore`}\n                type=\"string\"\n                ref={register}\n                defaultValue=\"\"\n                disabled={usmleLevelTwoAccepted === 'Yes' ? false : true}\n              />\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailUSMLELevelTwoComments\"\n            >\n              <Form.Label> USMLE Level 2 Comments </Form.Label>\n              <Form.Control\n                name={`usmleLevelTwoComments`}\n                as=\"textarea\"\n                rows=\"2\"\n                placeholder=\"Enter comments here...\"\n                defaultValue=\"\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formProgramDetailPhoto\">\n              <Form.Label>Photo?</Form.Label>\n              <Form.Control as=\"select\" name={`photo`} ref={register}>\n                {formSelect.map((selectOption, index) => (\n                  <option\n                    name={`photo`}\n                    key={`programDetail.photo.${selectOption.name}${index}`}\n                    value={selectOption.value}\n                    id={selectOption.name}\n                  >\n                    {selectOption.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"formProgramDetailCV\">\n              <Form.Label>CV?</Form.Label>\n              <Form.Control as=\"select\" name={`cv`} ref={register}>\n                {formSelect.map((selectOption, index) => (\n                  <option\n                    name={`cv`}\n                    key={`programDetail.cv.${selectOption.name}${index}`}\n                    value={selectOption.value}\n                    id={selectOption.name}\n                  >\n                    {selectOption.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group\n              md={3}\n              as={Col}\n              controlId=\"formProgramDetailDeansLetter\"\n            >\n              <Form.Label>Dean's Letter?</Form.Label>\n              <Form.Control as=\"select\" name={`deansLetter`} ref={register}>\n                {formSelect.map((selectOption, index) => (\n                  <option\n                    name={`deansLetter`}\n                    key={`programDetail.deansLetter.${selectOption.name}${index}`}\n                    value={selectOption.value}\n                    id={selectOption.name}\n                  >\n                    {selectOption.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group\n              md={9}\n              as={Col}\n              controlId=\"formProgramDetailDeansLetterComments\"\n            >\n              <Form.Label>Dean's Letter Comments</Form.Label>\n              <Form.Control\n                name={`deansLetterComments`}\n                type=\"string\"\n                placeholder=\"Dean's Letter comments\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group md={3} as={Col} controlId=\"formProgramDetailTranscript\">\n              <Form.Label>Transcript?</Form.Label>\n              <Form.Control as=\"select\" name={`transcript`} ref={register}>\n                {formSelect.map((selectOption, index) => (\n                  <option\n                    name={`transcript`}\n                    key={`programDetail.transcript.${selectOption.name}${index}`}\n                    value={selectOption.value}\n                    id={selectOption.name}\n                  >\n                    {selectOption.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group\n              md={9}\n              as={Col}\n              controlId=\"formProgramDetailTranscriptComments\"\n            >\n              <Form.Label>Transcript Comments</Form.Label>\n              <Form.Control\n                name={`transcriptComments`}\n                type=\"string\"\n                placeholder=\"Transcript comments\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group\n              md={3}\n              as={Col}\n              controlId=\"formProgramDetailPersonalStatement\"\n            >\n              <Form.Label>Personal Statement?</Form.Label>\n              <Form.Control\n                as=\"select\"\n                name={`personalStatement`}\n                ref={register}\n              >\n                {formSelect.map((selectOption, index) => (\n                  <option\n                    name={`personalStatement`}\n                    key={`programDetail.personalStatement.${selectOption.name}${index}`}\n                    value={selectOption.value}\n                    id={selectOption.name}\n                  >\n                    {selectOption.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group\n              md={9}\n              as={Col}\n              controlId=\"formProgramDetail.personalStatementComments\"\n            >\n              <Form.Label>Personal Statement Comments</Form.Label>\n              <Form.Control\n                name={`personalStatementComments`}\n                type=\"string\"\n                placeholder=\"Personal Statement comments\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group md={3} as={Col} controlId=\"formProgramDetailResearch\">\n              <Form.Label>Research?</Form.Label>\n              <Form.Control as=\"select\" name={`research`} ref={register}>\n                {formSelect.map((selectOption, index) => (\n                  <option\n                    name={`research`}\n                    key={`programDetail.research.${selectOption.name}${index}`}\n                    value={selectOption.value}\n                    id={selectOption.name}\n                  >\n                    {selectOption.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group\n              md={9}\n              as={Col}\n              controlId=\"formProgramDetailResearchComments\"\n            >\n              <Form.Label>Research Comments</Form.Label>\n              <Form.Control\n                name={`researchComments`}\n                type=\"string\"\n                placeholder=\"Research comments\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group md={3} as={Col} controlId=\"formProgramAuditionRotation\">\n              <Form.Label>Audition Rotation?</Form.Label>\n              <Form.Control\n                as=\"select\"\n                name={`auditionRotation`}\n                ref={register}\n              >\n                {formSelect.map((selectOption, index) => (\n                  <option\n                    name={`auditionRotation`}\n                    key={`programDetail.auditionRotation.${selectOption.name}${index}`}\n                    value={selectOption.value}\n                    id={selectOption.name}\n                  >\n                    {selectOption.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group\n              md={9}\n              as={Col}\n              controlId=\"formProgramDetailAuditionRotationComments\"\n            >\n              <Form.Label>Audition Rotation Comments</Form.Label>\n              <Form.Control\n                name={`auditionRotationComments`}\n                type=\"string\"\n                placeholder=\"Audition Rotation comments\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group md={3} as={Col} controlId=\"formProgramDOFriendly\">\n              <Form.Label>DO Friendly?</Form.Label>\n              <Form.Control as=\"select\" name={`doFriendly`} ref={register}>\n                {formSelect.map((selectOption, index) => (\n                  <option\n                    name={`doFriendly`}\n                    key={`programDetail.doFriendly.${selectOption.name}${index}`}\n                    value={selectOption.value}\n                    id={selectOption.name}\n                  >\n                    {selectOption.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group\n              md={9}\n              as={Col}\n              controlId=\"formProgramDetailDOFriendlyComments\"\n            >\n              <Form.Label>DO Friendly Comments</Form.Label>\n              <Form.Control\n                name={`doFriendlyComments`}\n                type=\"string\"\n                placeholder=\"DO Friendly comments\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group md={3} as={Col} controlId=\"formProgramIMSFriendly\">\n              <Form.Label>IMS Friendly?</Form.Label>\n              <Form.Control as=\"select\" name={`imsFriendly`} ref={register}>\n                {formSelect.map((selectOption, index) => (\n                  <option\n                    name={`imsFriendly`}\n                    key={`programDetail.imsFriendly.${selectOption.name}${index}`}\n                    value={selectOption.value}\n                    id={selectOption.name}\n                  >\n                    {selectOption.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group\n              md={9}\n              as={Col}\n              controlId=\"formProgramDetailIMSFriendlyComments\"\n            >\n              <Form.Label>IMS Friendly Comments</Form.Label>\n              <Form.Control\n                name={`imsFriendlyComments`}\n                type=\"string\"\n                placeholder=\"IMS Friendly comments\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group md={3} as={Col} controlId=\"formProgramERASApplication\">\n              <Form.Label>ERAS Application?</Form.Label>\n              <Form.Control as=\"select\" name={`erasApplication`} ref={register}>\n                {formSelect.map((selectOption, index) => (\n                  <option\n                    name={`erasApplication`}\n                    key={`programDetail.erasApplication.${selectOption.name}${index}`}\n                    value={selectOption.value}\n                    id={selectOption.name}\n                  >\n                    {selectOption.name}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group\n              md={9}\n              as={Col}\n              controlId=\"formProgramDetailERASApplicationComments\"\n            >\n              <Form.Label>ERAS Application Comments</Form.Label>\n              <Form.Control\n                name={`erasApplicationComments`}\n                type=\"string\"\n                placeholder=\"ERAS Application comments\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailERASApplicationDate\"\n            >\n              <Form.Label>Application Date Deadline</Form.Label>\n              <Form.Control\n                name={`erasApplicationDate`}\n                type=\"string\"\n                placeholder=\"1/1/2020\"\n                ref={register}\n              />\n            </Form.Group>\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailNumberOfApplicationsAccepted\"\n            >\n              <Form.Label> Number of Apps Accepted </Form.Label>\n              <Form.Control\n                name={`numberOfApplicationsAccepted`}\n                type=\"number\"\n                placeholder=\"20\"\n                defaultValue=\"\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            {' '}\n            <Form.Group as={Col} controlId=\"formProgramDetailOtherCommentsOne\">\n              <Form.Label> Other Comments 1</Form.Label>\n              <Form.Control\n                name={`otherCommentsOne`}\n                as=\"textarea\"\n                rows=\"2\"\n                placeholder=\"Enter comments here...\"\n                defaultValue=\"\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            {' '}\n            <Form.Group as={Col} controlId=\"formProgramDetailOtherCommentsTwo\">\n              <Form.Label> Other Comments 2</Form.Label>\n              <Form.Control\n                name={`otherCommentsTwo`}\n                as=\"textarea\"\n                rows=\"2\"\n                placeholder=\"Enter comments here...\"\n                defaultValue=\"\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            {' '}\n            <Form.Group\n              as={Col}\n              controlId=\"formProgramDetailOtherCommentsThree\"\n            >\n              <Form.Label> Other Comments 3</Form.Label>\n              <Form.Control\n                name={`otherCommentsThree`}\n                as=\"textarea\"\n                rows=\"2\"\n                placeholder=\"Enter comments here...\"\n                defaultValue=\"\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            {' '}\n            <Form.Group as={Col} controlId=\"formProgramDetailOtherCommentsFour\">\n              <Form.Label> Other Comments 4</Form.Label>\n              <Form.Control\n                name={`otherCommentsFour`}\n                as=\"textarea\"\n                rows=\"2\"\n                placeholder=\"Enter comments here...\"\n                defaultValue=\"\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            {' '}\n            <Form.Group as={Col} controlId=\"formProgramDetailOtherCommentsFive\">\n              <Form.Label> Other Comments 5</Form.Label>\n              <Form.Control\n                name={`otherCommentsFive`}\n                as=\"textarea\"\n                rows=\"2\"\n                placeholder=\"Enter comments here...\"\n                defaultValue=\"\"\n                ref={register}\n              />\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formLastUpdatedByProgramDetail\">\n              {/* <Form.Label>Last</Form.Label> */}\n              <Form.Control\n                name={`lastUpdatedBy`}\n                type=\"string\"\n                value=\"Seed\"\n                ref={register}\n                readOnly\n              />\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"formLastUpdatedDateProgramDetail\">\n              {/* <Form.Label>AddressId</Form.Label> */}\n              <Form.Control\n                name={`lastUpdatedDT`}\n                type=\"string\"\n                value={new Date().toLocaleString()}\n                ref={register}\n                readOnly\n              />\n            </Form.Group>\n          </Form.Row>\n          <hr></hr>\n          <Button variant=\"primary\" type=\"submit\">\n            Submit\n          </Button>\n        </Form>\n      )}\n    </div>\n  );\n};\n\nexport default EditProgramDetail;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { useAuth0 } from '../contexts/auth0-context';\n\nconst PrivateRoute = ({ component: Component, path, ...rest }) => {\n  const { isLoading, user } = useAuth0();\n\n  const render = (props) =>\n    user && !isLoading ? <Component {...props} /> : null;\n\n  return <Route path={path} render={render} {...rest} />;\n};\n\nexport default PrivateRoute;\n","import React, { useState } from 'react';\nimport { useAuth0 } from '../contexts/auth0-context';\n\nconst ExternalApi = () => {\n  const [showResult, setShowResult] = useState(false);\n  const [apiMessage, setApiMessage] = useState('');\n  const { getTokenSilently } = useAuth0();\n\n  const callApi = async () => {\n    try {\n      const token = await getTokenSilently({\n        scope: 'read:status, write:program',\n        audience: 'https://github.com/tguar/ResidencyAPI',\n      });\n\n      console.log(token);\n      const response = await fetch(\n        'https://residency.azurewebsites.net/categories/health',\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n      // const responseData = { result: 'womp' };\n      const responseData = await response;\n      // console.log(responseData.text());\n      setShowResult(true);\n      console.log(responseData.statusText);\n      let a = responseData.statusText;\n      setApiMessage(a);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <>\n      <h1>External API</h1>\n      <button onClick={callApi}>Ping API</button>\n      {showResult && <p>Endpoint status is: {apiMessage} </p>}\n    </>\n  );\n};\n\nexport default ExternalApi;\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport {\n  Home,\n  AddProgram,\n  EditProgram,\n  AddProgramDetail,\n  EditProgramDetail,\n  Main,\n  Marketplace,\n  Map,\n} from './views';\nimport { Header } from './components';\nimport PrivateRoute from './components/PrivateRoute';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\nimport ExternalApi from './views/ExternalApi';\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/map\">\n            <Main>\n              <Map />\n            </Main>\n          </Route>\n          <PrivateRoute exact path=\"/addProgram\" component={AddProgram} />\n          <PrivateRoute\n            exact\n            path=\"/addProgramDetail\"\n            component={AddProgramDetail}\n          />\n          <PrivateRoute\n            exact\n            path={'/editProgram/:programId'}\n            component={EditProgram}\n          ></PrivateRoute>\n          <PrivateRoute\n            exact\n            path={'/editProgramDetail/:programDetailId'}\n            component={EditProgramDetail}\n          />\n          <PrivateRoute exact path=\"/external-api\" component={ExternalApi} />\n          <Route exact path=\"/\">\n            <Main>\n              <Marketplace />\n            </Main>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Auth0Provider, ProgramsProvider } from './contexts';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Auth0Provider>\n      <ProgramsProvider>\n        <App />\n      </ProgramsProvider>\n    </Auth0Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}